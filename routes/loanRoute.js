const express = require('express');
const router = express.Router();
const loanController = require('../controllers/loan_view');
const authenticateToken = require('../Middleware/authenticateToken');
const rolesList = require('../Helpers/roleList');
const verifyRoles = require('../Helpers/verifyRole');

router.post('/create', loanController.createLoan);
router.route('/all')
    .get(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
        ),
        loanController.getAllLoans
    )
router.route('/:bankId/all')
    .get(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
        ),
        loanController.getAllLoansByBank
    )
router.route('/:branch/all')
    .get(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
        ),
        loanController.getAllLoansByBranchId
    )
router.route('/:loanId')
    .get(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
            rolesList.staff,
            rolesList.customer, // Only if they're accessing their own loan
        ),
        loanController.getLoanById
    )
router.route('/user/:userId')
    .get(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
            rolesList.staff,
            rolesList.customer,
        ),
        loanController.getLoansByUserId
    )
router.route('/status/approved')
    .get(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
            rolesList.staff,
        ),
        loanController.getApprovedLoans
    )
router.route('/status/rejected')
    .get(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
            rolesList.staff,
        ),
        loanController.getRejectedLoans
    )
router.route('/status/disbursed')
    .get(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
            rolesList.staff,
        ),
        loanController.getDisbursedLoans
    )
router.route('/:loanId/update')
    .put(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
            rolesList.staff,
        ),
        loanController.updateLoan
    )
router.route('/:loanId/delete')
    .delete(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
            rolesList.staff,
        ),
        loanController.deleteLoan
    );
router.route('/:loanId/approval')
    .put(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
        ),
        loanController.approveOrRejectLoan
    );
router.route('/:loanId/disburse')
    .put(
        authenticateToken,
        verifyRoles(
            rolesList.admin,
            rolesList.bank_admin,
            rolesList.staff,
        ),
        loanController.disburseLoan
    );

module.exports = router;
